"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[293],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=l.createContext({}),s=function(e){var t=l.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(a),d=n,y=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return a?l.createElement(y,i(i({ref:t},u),{},{components:a})):l.createElement(y,i({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6913:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var l=a(7462),n=(a(7294),a(3905));const r={sidebar_position:3,id:"galaxy",title:"Galaxy POST command",sidebar_label:"Galaxy integration"},i=void 0,o={unversionedId:"STENCIL Development/galaxy",id:"STENCIL Development/galaxy",title:"Galaxy POST command",description:"---",source:"@site/docs/STENCIL Development/payload.md",sourceDirName:"STENCIL Development",slug:"/STENCIL Development/galaxy",permalink:"/stencil/docs/STENCIL Development/galaxy",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/STENCIL Development/payload.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"galaxy",title:"Galaxy POST command",sidebar_label:"Galaxy integration"},sidebar:"tutorialSidebar",previous:{title:"Development tutorial",permalink:"/stencil/docs/STENCIL Development/tutorial"},next:{title:"Dynamic plot JSON format",permalink:"/stencil/docs/STENCIL Development/nivoplot"}},p={},s=[{value:"Galaxy integration with STENCIL",id:"galaxy-integration-with-stencil",level:2},{value:"JSON payload",id:"json-payload",level:2},{value:"libraryData Array",id:"librarydata-array",level:2},{value:"Example Payload",id:"example-payload",level:2}],u={toc:s};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"galaxy-integration-with-stencil"},"Galaxy integration with STENCIL"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Galaxy integration with STENCIL is facilitated by adding a simple python POST tool into a Galaxy workflow."),(0,n.kt)("li",{parentName:"ul"},"Example Galaxy scripts (with XML) to allow Galaxy to POST to STENCIL:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/CEGRcode/galaxy_tools_for_stencil"},"https://github.com/CEGRcode/galaxy_tools_for_stencil"))))),(0,n.kt)("h2",{id:"json-payload"},"JSON payload"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"projectId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"projectId is the highest level of categorizing the data in STENCIL."),(0,n.kt)("li",{parentName:"ul"},"STENCIL consists of many projects."),(0,n.kt)("li",{parentName:"ul"},"Each project consists of many samples and each sample consist of many libraries.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"libraryType")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type of the library that is POSTed to STENCIL."),(0,n.kt)("li",{parentName:"ul"},'Examples are "RNA-seq", "ATAC-seq", and "ChIP-seq".')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"sampleId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Name of the sample which the library belongs."),(0,n.kt)("li",{parentName:"ul"},"One sample can have multiple libraries."),(0,n.kt)("li",{parentName:"ul"},"An example of multiple libraries for a sample may be different replicates for a sample.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"libraryId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"An ID given to a library that is POSTed from Galaxy to STENCIL.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"libraryDescription")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Optional free-form string description about the library")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"createdBy")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Username of the Galaxy account under which the library is POSTed.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"createTimestamp")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The time the library is originally POSTed to STENCIL")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"updatedBy")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Username of the Galaxy account under which the POST is updated.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"updateTimestamp")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Timestamp from when the library was last updated.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"token")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"API key that is used to verify permission to POST to Stencil"),(0,n.kt)("li",{parentName:"ul"},"This is defined in the backend's .env file under SVC_STENCIL_PWD")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"groupTag")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"An array of additional meta information associated with each library."),(0,n.kt)("li",{parentName:"ul"},"An example is Galaxy HistoryID where the associated data read by STENCIL resides.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"libraryData")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"An array element containing the meta-information for each plot/chart/table/image POSTed to STENCIL."),(0,n.kt)("li",{parentName:"ul"},"The format of this element is detailed below.")),(0,n.kt)("h2",{id:"librarydata-array"},"libraryData Array"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"id")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A unique id assigned to each dataset in Galaxy"),(0,n.kt)("li",{parentName:"ul"},"If a Galaxy historyID is POSTed to STENCIL using this parameter, the path to reproducibility is maintained")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"dataType")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Type of data to be visualized in STENCIL."),(0,n.kt)("li",{parentName:"ul"},"Examples are PNG, SVG, JPG, basictable, lineplot, barchart, scatterplot, heatmap")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"layoutId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This is the unique ID of the layoutID that this data should be applied to."),(0,n.kt)("li",{parentName:"ul"},"See ",(0,n.kt)("a",{parentName:"li",href:"/stencil/docs/STENCIL%20Development/layout"},"Configure Layout")," for additional details.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"layoutTitle")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This is title for the layout section.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"tabId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each Layout may consists of multiple Tabs."),(0,n.kt)("li",{parentName:"ul"},"This variable sets the displayed name of Tabs.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"URL")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"URL of the location where STENCIL can access the data resides in Galaxy."),(0,n.kt)("li",{parentName:"ul"},"This can be any arbitrary URL")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"stepId")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Each Tab consists of multiple \u201cSteps\u201d."),(0,n.kt)("li",{parentName:"ul"},"Steps indicates where exactly in the Tab the data needs to be visualized.")),(0,n.kt)("h2",{id:"example-payload"},"Example Payload"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example payload:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "projectId": "Yeast Epigenome Project",\n  "libraryType": "Meta-analysis",\n  "sampleId": "UMAP meta-analysis",\n  "libraryId": "UMAP",\n  "libraryDescription": "UMAP meta-analysis of all ChIP-exo data-sets generated in the Yeast Epigenome Project",\n  "createdBy": "cegr@cornell.edu",\n  "token": "SGAN9WTPAUCAYDO8A8HD",\n  "submitter": "cegr@cornell.edu",\n  "libraryData": [\n    {\n        "id": "UMAP_plot",\n        "dataType": "scatterplot",\n        "layoutId": "SingleChart",\n        "layoutTitle": "UMAP of Yeast Epigenome",\n        "tabId": "Scatter Plot",\n        "URL": "http://localhost:8081/localdata/YEP/UMAP/UMAP_scatterplot.json",\n        "stepId": "0"\n    },\n    {\n      "id": "UMAP_rawdata",\n        "dataType": "basictable",\n      "layoutId": "SingleChart",\n        "layoutTitle": "UMAP of Yeast Epigenome",\n      "tabId": "UMAP Data",\n      "URL": "http://localhost:8081/localdata/YEP/UMAP/UMAP_table.json",\n      "stepId": "0"\n    }\n  ]\n}\n')))}m.isMDXComponent=!0}}]);