"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[562],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),l=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(o.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=a,y=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return t?n.createElement(y,p(p({ref:r},c),{},{components:t})):n.createElement(y,p({ref:r},c))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,p=new Array(s);p[0]=m;var i={};for(var o in r)hasOwnProperty.call(r,o)&&(i[o]=r[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<s;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},631:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const s={sidebar_position:6,id:"apiaccess",title:"API access",sidebar_label:"API access"},p=void 0,i={unversionedId:"STENCIL Development/apiaccess",id:"STENCIL Development/apiaccess",title:"API access",description:"---",source:"@site/docs/STENCIL Development/apiaccess.md",sourceDirName:"STENCIL Development",slug:"/STENCIL Development/apiaccess",permalink:"/stencil/docs/STENCIL Development/apiaccess",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/STENCIL Development/apiaccess.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"apiaccess",title:"API access",sidebar_label:"API access"},sidebar:"tutorialSidebar",previous:{title:"Configure layouts",permalink:"/stencil/docs/STENCIL Development/layout"}},o={},l=[{value:"API Access",id:"api-access",level:2},{value:"postLibrary.py",id:"postlibrarypy",level:3},{value:"Example usage:",id:"example-usage",level:4},{value:"deleteLibrary.py",id:"deletelibrarypy",level:3},{value:"Example usage:",id:"example-usage-1",level:4},{value:"getLibraries.py",id:"getlibrariespy",level:3},{value:"Example usage:",id:"example-usage-2",level:4}],c={toc:l};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"api-access"},"API Access"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"STENCIL NodeJS backend is accessible programmatically"),(0,a.kt)("li",{parentName:"ul"},"Example scripts for accessing STENCIL are provided in ",(0,a.kt)("em",{parentName:"li"},"/backend/utils"))),(0,a.kt)("h3",{id:"postlibrarypy"},"postLibrary.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#!/usr/bin/python\n\nimport argparse\nimport json\nimport requests\n\n# reference : https://realpython.com/python-requests/\n\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser(\n        description='Inserts JSON into backend using the POST request')\n    parser.add_argument('jsonFile', help='Library data in JSON format')\n    args = parser.parse_args()\n\n    URL = \"http://localhost:8081/libraries\"\n\n    # Reading the example.json\n    f=open(args.jsonFile, 'r')\n    value = json.load(f)\n    f.close()\n\n    response = requests.post(URL, json=value, verify=False)\n    print(f\"STATUS: {response.status_code}  \\nReason: {response.reason} \\nMessage: {response.content}\")\n")),(0,a.kt)("h4",{id:"example-usage"},"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 postLibrary.py libraryData.json\n")),(0,a.kt)("h3",{id:"deletelibrarypy"},"deleteLibrary.py"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Deletes library in STENCIL given libraryID and projectID"),(0,a.kt)("li",{parentName:"ul"},"Token must equal SVC_STENCIL_PWD")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#!/usr/bin/python\n\nimport pprint\nimport json\nimport requests\nimport sys\n\n# reference : https://realpython.com/python-requests/\n\nif __name__ == \'__main__\':\n\n    URL = "http://localhost/libraries/libid/"\n\n    projectId = sys.argv[1]\n    libraryId = sys.argv[2]\n\n    token = "XXXXXX"\n\n    deleteURL = f"{URL}/{token}/{projectId}/{libraryId}"\n    response = requests.delete(deleteURL)\n    pprint.pprint(response.json())\n')),(0,a.kt)("h4",{id:"example-usage-1"},"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 deleteLibrary.py projectID libraryID\n")),(0,a.kt)("h3",{id:"getlibrariespy"},"getLibraries.py"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Retrieves ALL data in STENCIL in JSON format"),(0,a.kt)("li",{parentName:"ul"},"Token must equal SVC_STENCIL_PWD")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#!/usr/bin/python\n\nimport argparse\nimport pprint\nimport requests\n\n# reference : https://realpython.com/python-requests/\n\nif __name__ == \'__main__\':\n\n    token = "XXXXXX"\n\n    URL = "http://localhost/libraries/all/"+ token\n\n    # making a GET request for all the samples.\n    print("\\n GET data \\n")\n    response = requests.get(URL,verify=False)\n    pprint.pprint(response.json())\n')),(0,a.kt)("h4",{id:"example-usage-2"},"Example usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 getLibraries.py > ALL_DATA.json\n")))}u.isMDXComponent=!0}}]);