"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[616],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),u=o,k=s["".concat(p,".").concat(u)]||s[u]||m[u]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4176:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return s}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:1,id:"docker",title:"Building a Docker image",sidebar_label:"Docker"},p=void 0,c={unversionedId:"Production Deployment/docker",id:"Production Deployment/docker",title:"Building a Docker image",description:"---",source:"@site/docs/Production Deployment/docker.md",sourceDirName:"Production Deployment",slug:"/Production Deployment/docker",permalink:"/stencil/docs/Production Deployment/docker",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Production Deployment/docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"docker",title:"Building a Docker image",sidebar_label:"Docker"},sidebar:"tutorialSidebar",previous:{title:"API access",permalink:"/stencil/docs/STENCIL Development/apiaccess"},next:{title:"Deployment preparations",permalink:"/stencil/docs/Production Deployment/CentOS 8/deploystart"}},d=[{value:"Docker",id:"docker",children:[{value:"Using docker-compose to combine backend and frontend deployment",id:"using-docker-compose-to-combine-backend-and-frontend-deployment",children:[],level:3}],level:2},{value:"Docker &amp; Docker deployment",id:"docker--docker-deployment",children:[],level:2}],m={toc:d};function s(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"docker"},"Docker"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Requires Docker >= 19.03"),(0,r.kt)("li",{parentName:"ul"},"Install from ",(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"here"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"optional, if you plan to dockerize your final applications")),(0,r.kt)("p",null,"This project comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", which can be used to build a docker image. Below are the step by step commands to build and launch a dockerized container that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx:alpine")," as base image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x3c!-- generate a build for your app --\x3e\nnpm run build\n\n\x3c!-- create a docker image --\x3e\ndocker build --tag=demofrontend .\n\n\x3c!-- run the docker container --\x3e\ndocker run -d -p 3000:80\n")),(0,r.kt)("p",null,"You can view your application in a browser at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),". Assuming you have the backend application running to serve the API that this docker container can consume."),(0,r.kt)("h3",{id:"using-docker-compose-to-combine-backend-and-frontend-deployment"},"Using docker-compose to combine backend and frontend deployment"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"To create a single standalone application that combines backend and frontend, we need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),".\nBelow are some build instructions and ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," that packages both backend and frontend into a single app."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Build an image for the backend")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Configure the backend's ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," as below to ensure proper communication between the mongodb & backend code."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'DB_URL="mongo:27017"\nDB_NAME="testDB"\nPUBLIC_ENDPOINT="http://localhost:8081/samples/"\nIMAGE_URL="http://localhost:8081/images/"\nNODE_PORT=8081\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Change the dataset path within the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'\x3c!-- Replace below line in app.js--\x3e\napp.use("/images", express.static("<some_example_path>"));\n\n\x3c!-- to below, before building the images --\x3e\napp.use("/images", express.static("/srv/app/images"));\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Build the image"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker build --tag=demobackend ."))))),(0,r.kt)("p",null,"\u2b50 ",(0,r.kt)("strong",{parentName:"p"},"Build an image for frontend")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x3c!-- generate a build for your app --\x3e\nnpm run build\n\n\x3c!-- create a docker image --\x3e\ndocker build --tag=demofrontend .\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a folder ",(0,r.kt)("inlineCode",{parentName:"li"},"Docker-App")," on your ",(0,r.kt)("inlineCode",{parentName:"li"},"Desktop")," and copy the ",(0,r.kt)("inlineCode",{parentName:"li"},"sampleData")," folder provided in your backend into it."),(0,r.kt)("li",{parentName:"ul"},"Create a new file ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Docker-App")," and copy the below contents into it.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'version: "3"\nservices:\n  server:\n    container_name: backend\n    image: "demobackend"\n    restart: always\n    ports:\n      - "8081:8081"\n    volumes:\n      - ./sampleData/images:/srv/app/images\n    depends_on:\n      - "mongo"\n  mongo:\n    image: "mongo"\n    ports:\n      - "27017:27017"\n  client:\n    container_name: frontend\n    image: "demofrontend"\n    expose:\n      - 3000\n    ports:\n      - "3000:80"\n    depends_on:\n      - server\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The spaces in the file matter. read more about ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"here"),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your ",(0,r.kt)("inlineCode",{parentName:"li"},"Docker-App")," directory should look like this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"|____Docker-App\n| |____sampleData/\n| |____docker-compose.yml\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now to launch the entire application, run the below command from ",(0,r.kt)("inlineCode",{parentName:"li"},"~/Desktop/Docker-App/"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker compose up")))),(0,r.kt)("li",{parentName:"ul"},"Once the container is running, you can use the scripts in ",(0,r.kt)("inlineCode",{parentName:"li"},"sampleData/utils/")," to insert sampleData."),(0,r.kt)("li",{parentName:"ul"},"To stop the container, hit ",(0,r.kt)("inlineCode",{parentName:"li"},"ctrl + c")," and then ",(0,r.kt)("inlineCode",{parentName:"li"},"docker compose down"))),(0,r.kt)("h2",{id:"docker--docker-deployment"},"Docker & Docker deployment"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"You can build an image for this app using the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", but it is useless on its own, since this project requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"MongoDB")," database to connect & store data. To achieve this we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," in conjunction to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Building a Docker Image")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Before building a docker image, we need to update the ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file to contain configuration as below. This ensures proper communication between the mongodb instance and our app within a docker container.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'DB_URL="mongo:27017"\nDB_NAME="testDB"\nPUBLIC_ENDPOINT="http://localhost:8081/samples/"\nIMAGE_URL="http://localhost:8081/images/"\nNODE_PORT=8081\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change the dataset path within the ",(0,r.kt)("inlineCode",{parentName:"li"},"app.js"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\x3c!-- Replace below line in app.js--\x3e\napp.use("/images", express.static("<some_example_path>"));\n\n\x3c!-- to below, before building the images --\x3e\napp.use("/images", express.static("/srv/app/images"));\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build the image",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker build --tag=demobackend ."))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"you can change the tag name from ",(0,r.kt)("inlineCode",{parentName:"p"},"demobackend")," to anything you like, but make sure you also update the name in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To run the app use the command:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose up")))),(0,r.kt)("li",{parentName:"ul"},"To insert example data use the ",(0,r.kt)("inlineCode",{parentName:"li"},"postData.py")," script within the ",(0,r.kt)("inlineCode",{parentName:"li"},"utils")," folder:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cd ./sampleData")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"python postData.py example.json"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Known issues")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"When you stop and start the containerized app, the data that was inserted into the db will be lost, to solve this problem docker uses ",(0,r.kt)("a",{parentName:"em",href:"https://docs.docker.com/storage/volumes/"},"volumes"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"MacOSX & mongodb-container volume ",(0,r.kt)("a",{parentName:"em",href:"https://stackoverflow.com/a/34903503"},"problem")," & ",(0,r.kt)("a",{parentName:"em",href:"https://docs.docker.com/storage/volumes/"},"work around"),"."))))}s.isMDXComponent=!0}}]);