(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[669],{7995:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var a=t(2122),o=t(9756),i=(t(7294),t(3905)),r={sidebar_position:6,id:"docker",title:"Building a Docker image",sidebar_label:"Docker"},l={unversionedId:"docker",id:"docker",isDocsHomePage:!1,title:"Building a Docker image",description:"---",source:"@site/docs/docker.md",sourceDirName:".",slug:"/docker",permalink:"/stencil/docs/docker",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/docker.md",version:"current",sidebar_label:"Docker",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"docker",title:"Building a Docker image",sidebar_label:"Docker"},sidebar:"tutorialSidebar",previous:{title:"Configure layouts",permalink:"/stencil/docs/layout"}},p=[{value:"Docker",id:"docker",children:[{value:"Using docker-compose to combine backend and frontend deployment",id:"using-docker-compose-to-combine-backend-and-frontend-deployment",children:[]}]},{value:"Docker &amp; Docker deployment",id:"docker--docker-deployment",children:[]}],d={toc:p};function c(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"docker"},"Docker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Requires Docker >= 19.03"),(0,i.kt)("li",{parentName:"ul"},"Install from ",(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"here"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"optional, if you plan to dockerize your final applications")),(0,i.kt)("p",null,"This project comes with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", which can be used to build a docker image. Below are the step by step commands to build and launch a dockerized container that uses ",(0,i.kt)("inlineCode",{parentName:"p"},"nginx:alpine")," as base image."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\x3c!-- generate a build for your app --\x3e\nnpm run build\n\n\x3c!-- create a docker image --\x3e\ndocker build --tag=demofrontend .\n\n\x3c!-- run the docker container --\x3e\ndocker run -d -p 3000:80\n")),(0,i.kt)("p",null,"You can view your application in a browser at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),". Assuming you have the backend application running to serve the API that this docker container can consume."),(0,i.kt)("h3",{id:"using-docker-compose-to-combine-backend-and-frontend-deployment"},"Using docker-compose to combine backend and frontend deployment"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"To create a single standalone application that combines backend and frontend, we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),".\nBelow are some build instructions and ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," that packages both backend and frontend into a single app."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Build an image for the backend")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Configure the backend's ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," as below to ensure proper communication between the mongodb & backend code."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'DB_URL="mongo:27017"\nDB_NAME="testDB"\nPUBLIC_ENDPOINT="http://localhost:8081/samples/"\nIMAGE_URL="http://localhost:8081/images/"\nNODE_PORT=8081\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Change the dataset path within the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.js")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'\x3c!-- Replace below line in app.js--\x3e\napp.use("/images", express.static("<some_example_path>"));\n\n\x3c!-- to below, before building the images --\x3e\napp.use("/images", express.static("/srv/app/images"));\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Build the image"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker build --tag=demobackend ."))))),(0,i.kt)("p",null,"\u2b50 ",(0,i.kt)("strong",{parentName:"p"},"Build an image for frontend")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\x3c!-- generate a build for your app --\x3e\nnpm run build\n\n\x3c!-- create a docker image --\x3e\ndocker build --tag=demofrontend .\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a folder ",(0,i.kt)("inlineCode",{parentName:"li"},"Docker-App")," on your ",(0,i.kt)("inlineCode",{parentName:"li"},"Desktop")," and copy the ",(0,i.kt)("inlineCode",{parentName:"li"},"sampleData")," folder provided in your backend into it."),(0,i.kt)("li",{parentName:"ul"},"Create a new file ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Docker-App")," and copy the below contents into it.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'version: "3"\nservices:\n  server:\n    container_name: backend\n    image: "demobackend"\n    restart: always\n    ports:\n      - "8081:8081"\n    volumes:\n      - ./sampleData/images:/srv/app/images\n    depends_on:\n      - "mongo"\n  mongo:\n    image: "mongo"\n    ports:\n      - "27017:27017"\n  client:\n    container_name: frontend\n    image: "demofrontend"\n    expose:\n      - 3000\n    ports:\n      - "3000:80"\n    depends_on:\n      - server\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The spaces in the file matter. read more about ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"here"),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Your ",(0,i.kt)("inlineCode",{parentName:"li"},"Docker-App")," directory should look like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"|____Docker-App\n| |____sampleData/\n| |____docker-compose.yml\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Now to launch the entire application, run the below command from ",(0,i.kt)("inlineCode",{parentName:"li"},"~/Desktop/Docker-App/"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker compose up")))),(0,i.kt)("li",{parentName:"ul"},"Once the container is running, you can use the scripts in ",(0,i.kt)("inlineCode",{parentName:"li"},"sampleData/utils/")," to insert sampleData."),(0,i.kt)("li",{parentName:"ul"},"To stop the container, hit ",(0,i.kt)("inlineCode",{parentName:"li"},"ctrl + c")," and then ",(0,i.kt)("inlineCode",{parentName:"li"},"docker compose down"))),(0,i.kt)("h2",{id:"docker--docker-deployment"},"Docker & Docker deployment"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"You can build an image for this app using the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile"),", but it is useless on its own, since this project requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"MongoDB")," database to connect & store data. To achieve this we need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," in conjunction to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Building a Docker Image")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Before building a docker image, we need to update the ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file to contain configuration as below. This ensures proper communication between the mongodb instance and our app within a docker container.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'DB_URL="mongo:27017"\nDB_NAME="testDB"\nPUBLIC_ENDPOINT="http://localhost:8081/samples/"\nIMAGE_URL="http://localhost:8081/images/"\nNODE_PORT=8081\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Change the dataset path within the ",(0,i.kt)("inlineCode",{parentName:"li"},"app.js"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\x3c!-- Replace below line in app.js--\x3e\napp.use("/images", express.static("<some_example_path>"));\n\n\x3c!-- to below, before building the images --\x3e\napp.use("/images", express.static("/srv/app/images"));\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build the image",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker build --tag=demobackend ."))))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"you can change the tag name from ",(0,i.kt)("inlineCode",{parentName:"p"},"demobackend")," to anything you like, but make sure you also update the name in the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To run the app use the command:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose up")))),(0,i.kt)("li",{parentName:"ul"},"To insert example data use the ",(0,i.kt)("inlineCode",{parentName:"li"},"postData.py")," script within the ",(0,i.kt)("inlineCode",{parentName:"li"},"utils")," folder:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cd ./sampleData")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python postData.py example.json"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Known issues")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"When you stop and start the containerized app, the data that was inserted into the db will be lost, to solve this problem docker uses ",(0,i.kt)("a",{parentName:"em",href:"https://docs.docker.com/storage/volumes/"},"volumes"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"MacOSX & mongodb-container volume ",(0,i.kt)("a",{parentName:"em",href:"https://stackoverflow.com/a/34903503"},"problem")," & ",(0,i.kt)("a",{parentName:"em",href:"https://docs.docker.com/storage/volumes/"},"work around"),"."))))}c.isMDXComponent=!0}}]);